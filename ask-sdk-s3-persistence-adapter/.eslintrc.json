{
    "extends": [
        "eslint:recommended"
        //"plugin:@typescript-eslint/recommended"
        // "plugin:@typescript-eslint/recommended-requiring-type-checking"  // TODO: fix errors and turn on.
    ],
    "parser": "@typescript-eslint/parser",
    "plugins": [
        "@typescript-eslint",
        "@typescript-eslint/eslint-plugin",
        "eslint-plugin-tsdoc"
    ],
    "env": {
        "commonjs": true,
        "node": true,
        "mocha": true
    },
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly"
    },
    "parserOptions": {
        "ecmaVersion": 2019,
        "sourceType": "module",
        "ecmaFeatures": {
            "modules": true,
            "impliedStrict": true
        },
        "project": "tsconfig.json"
    },
    "rules": {


        // ---------------------------------------------------------
        // --- Rules from eslint:recommended that we override
        // ---------------------------------------------------------
        "no-empty": "warn",
        "no-unused-vars": "off", // because it flags types that are imported for type declarations (but otherwise unused).
        "no-undef": "off", // because if flags lack of import for Set.  // TODO: fix the issues and remove this override.

        // ---------------------------------------------------------
        // --- Rules that we add and/or customize
        // ---------------------------------------------------------

        "eqeqeq": ["error", "smart"],
        "guard-for-in": "error",
        // "id-blacklist": ["error", "any", "Number", "number", "String", "string", "Boolean", "boolean", "Undefined", "undefined"],
        "id-match": "error",
        "import/no-extraneous-dependencies": ["off", { "devDependencies": false }],
        "new-parens": "error",
        "no-caller": "error",
        "no-duplicate-imports": "error",
        "no-eval": "error",
        "no-extra-bind": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-return-await": "error",
        "no-sequences": "error",
        "no-shadow": ["off", { "hoist": "all" }],
        "no-undef-init": "error",
        "no-var": "error",
        "object-shorthand": "error",
        "one-var": ["error", "never"],
        "prefer-const": "error",
        "prefer-object-spread": "error",
        "radix": "error",

        // -- Rules from @typescript-eslint
        // "@typescript-eslint/strict-boolean-expressions": ["error"], // avoids frequent sources of errors: 0, "", Promise<T>, null vs undefined
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
        "@typescript-eslint/ban-types": [
            "error",
            {
                "types": {
                    "Object": { "message": "Avoid using the `Object` type. Did you mean `object`?" },
                    "Function": { "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`." },
                    "Boolean": { "message": "Avoid using the `Boolean` type. Did you mean `boolean`?" },
                    "Number": { "message": "Avoid using the `Number` type. Did you mean `number`?" },
                    "String": { "message": "Avoid using the `String` type. Did you mean `string`?"},
                    "Symbol": { "message": "Avoid using the `Symbol` type. Did you mean `symbol`?" }
                }
            }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "off",
        "@typescript-eslint/explicit-member-accessibility": ["off", { "accessibility": "explicit" }],
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-floating-promises": [ "error"], // prevent those nasty forgotten promises !
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unused-expressions": "off",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/triple-slash-reference": [
            "error",
            {
                "path": "always",
                "types": "prefer-import",
                "lib": "always"
            }
        ],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unified-signatures": "error",

        // -- Rules form tsdoc
        // "tsdoc/syntax": "error",

        // ---------------------------------------------------------
        // Stylistic settings (as we use ESLint as our formatter)
        // ---------------------------------------------------------
        "no-trailing-spaces": "warn",
        "quote-props": [
            "error",
            "consistent-as-needed"
        ],

        "no-template-curly-in-string": "off",
        "curly": "error",
        "object-curly-newline": [
            "error",
            {
                "consistent": true
            }
        ],
        "no-whitespace-before-property": "error",
        "space-infix-ops": ["error"],
        "space-in-parens": [
            "error",
            "never"
        ],
        "spaced-comment": [
            "error",
            "always",
            {
                "markers": [
                    "/"
                ]
            }
        ],
        "no-multiple-empty-lines": "off",
        "no-multi-spaces": ["error", {"ignoreEOLComments": true}],
        "prefer-template": "error",
        "keyword-spacing": [
            2,
            {
                "overrides": {
                    "if": {
                        "after": true
                    },
                    "for": {
                        "after": true
                    },
                    "while": {
                        "after": true
                    }
                }
            }
        ],
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "@typescript-eslint/indent": [
            "error",
            4,
            {
                "SwitchCase": 1,
                "ObjectExpression": "first",
                "FunctionDeclaration": {
                    "parameters": "first"
                },
                "FunctionExpression": {
                    "parameters": "first"
                }
            }
        ],
        "max-len": [
            "error",
            250,
            4
        ],
        "comma-dangle": [
            "error",
            {
                "arrays": "only-multiline",
                "objects": "only-multiline",
                "imports": "never",
                "exports": "never",
                "functions": "ignore"
            }
        ],
        "semi-spacing": "error",
        "semi": [
            "error",
            "always"
        ],
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "never",
                "asyncArrow": "always",
                "named": "never"
            }
        ],
        "@typescript-eslint/quotes": "off",
        "@typescript-eslint/semi": [
            "error",
            "always"
        ],
        "arrow-body-style": "error",
        "arrow-parens": [
            "off",
            "always"
        ],
        "brace-style": [
            "off",
            "off"
        ],
        "camelcase": "error"
    },
    "overrides": [
        {
            "files": [
                "src/*.js"
            ],
            "excludedFiles": "doc/*",
            "rules": {
                "quotes": [
                    "error",
                    "single"
                ]
            }
        }
    ]
}
